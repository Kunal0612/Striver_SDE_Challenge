#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
void lft(TreeNode<int>* root,vector<int> &ans){
    TreeNode<int>* tmp=root->left;
    while(tmp!=NULL){
        if(tmp->left!=NULL or tmp->right!=NULL) ans.push_back(tmp->data);
        if(tmp->left!=NULL) tmp=tmp->left;
        else tmp=tmp->right;
    }
}
void leaf(TreeNode<int>* root,vector<int> &ans){
    if(root->left==NULL and root->right==NULL) ans.push_back(root->data);
    if(root->left!=NULL) leaf(root->left,ans);
    if(root->right!=NULL) leaf(root->right,ans);
}
void rgt(TreeNode<int>* root,vector<int> &ans){
    TreeNode<int>* tmp=root->right;
    vector<int> res;
    while(tmp!=NULL){
        if(tmp->left!=NULL or tmp->right!=NULL) res.push_back(tmp->data);
        if(tmp->right!=NULL) tmp=tmp->right;
        else tmp=tmp->left;
    }
    for(int i=res.size()-1;i>=0;i--) ans.push_back(res[i]);
}
vector<int> traverseBoundary(TreeNode<int>* root){
    vector<int> ans;
    if(root==NULL) return {};
    if(root->left!=NULL or root->right!=NULL) ans.push_back(root->data);
    lft(root,ans);
    leaf(root,ans);
    rgt(root,ans);
    return ans;
}
