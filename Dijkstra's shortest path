#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &vec, int n, int m, int s) {
    unordered_map<int,vector<pair<int,int>>> mp;
    for(auto x:vec){
        mp[x[0]].push_back({x[1],x[2]});
        mp[x[1]].push_back({x[0],x[2]});
    }
    priority_queue <pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
    pq.push({0,s});
    vector<int> dist(n,INT_MAX),vis(n,0);
    dist[s]=0;
    vis[s]=1;
    while(!pq.empty()){
        auto node=pq.top();
        pq.pop();
        int v=node.second;
        int wt=node.first;
        for(auto x:mp[v]){
            int dis=x.second;
            int nn=x.first;
            if(dist[v]+dis<dist[nn]){
                dist[nn]=dist[v]+dis;
                pq.push({dist[nn],nn});
                vis[nn]=1;
            }
        }
    }
    //for(int i=0;i<n;i++) if(dist[i]==1e9) dist[i]=-1;
    return dist;
}
