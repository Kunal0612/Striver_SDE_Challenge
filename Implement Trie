#include <bits/stdc++.h> 

class Node{
public:
    bool flag = false;
    Node* links[26]; 
    int ce=0,cp=0;
    bool contains(char c){
        return links[c - 'a'] != nullptr;
    }
    void put(char c){
        links[c - 'a'] = new Node();
    }
    Node* next(char c){
        return links[c - 'a'];
    }
    bool isend(){
        return flag;
    }
    void incend(){
        ce++;
    }
    void incp(){
        cp++;
    }
    void decend(){
        ce--;
    }
    void decp(){
        cp--;
    }
    void setEnd(){
        flag = true;
    }
    bool isEnd(){
        return flag;
    }
    int getend(){
        return ce;
    }
    int getp(){
        return cp;
    }
};
class Trie{
public:
    Node* root;
    Trie(){
        root = new Node();
    }
    void insert(string s){  //to insert a word in a trie
        Node* tmp = root;
        for(int i = 0; i < s.size(); ++i){
            if(!tmp->contains(s[i])){
                tmp->put(s[i]);
            }
            tmp = tmp->next(s[i]);
        }
        tmp->setEnd();
    }
    bool isallpre_present(string s){ //return true if all prefix is present else false
        Node* tmp = root;
        for(auto c : s){
            tmp = tmp->next(c);
            if(!tmp->isEnd()) return false;
        }
        return true;
    }
    bool search(string word) { //return true if word is present else false
        Node *node = root;
        for(int i =0;i<word.size();i++){
            if(!node->contains(word[i])) return false; 
            node = node->next(word[i]);
        }
        return node->isend();
    }
    int countWordsEqualTo(string &word){ //return count of word 
        Node* node=root;
        for(auto x:word){
            if(node->contains(x)){
                node=node->next(x);
            }
            else return 0;
        }
        return node->getend();
    }
    int countWordsStartingWith(string &word){  //return count of string starting with word
        Node* node=root;
        for(auto x:word){
            if(node->contains(x)){
                node=node->next(x);
            }
            else return 0;
        }
        return node->getp();
    }
    void erase(string &word){  //erase the word present in trie
        Node* node=root;
        for(auto x:word){
            if(node->contains(x)){
                node=node->next(x);
                node->decp();
            }
            else return;
        }
        node->decend();
    }
    bool startsWith(string word) {   //check if string start with word present or not
        Node *node = root;
        for(auto x:word){
            if(!node->contains(x)) return false;
            node=node->next(x);
        }
        return true;
    }
};
