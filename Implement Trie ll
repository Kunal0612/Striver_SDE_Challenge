#include <bits/stdc++.h> 

class Node{
public:
    Node *links[26];
    bool flag = false;
    int ce=0,cp=0;
    bool containsKey(char ch){

        return (links[ch-'a'] != NULL);

    }
    void put(char ch , Node *n){

        links[ch-'a'] = n;

    }
    Node *get(char ch){

        return links[ch-'a'];

    }
    void setend(){
        flag = true;
    }

    bool isend(){
        return flag;
    }
    void incend(){
        ce++;
    }
    void incp(){
        cp++;
    }
    void decend(){
        ce--;
    }
    void decp(){
        cp--;
    }
    int getend(){
        return ce;
    }
    int getp(){
        return cp;
    }
};

class Trie{

    public:
    Node * root;

    Trie() {

        root = new Node();

    } 

    void insert(string &word){
        // Write your code here.
        Node* node=root;
        for(auto x:word){
            if(!node->containsKey(x)){
                node->put(x,new Node());
            }
            node=node->get(x);
            node->incp();
        }
        node->incend();
    }

    int countWordsEqualTo(string &word){
        // Write your code here.
        Node* node=root;
        for(auto x:word){
            if(node->containsKey(x)){
                node=node->get(x);
            }
            else return 0;
        }
        return node->getend();
    }

    int countWordsStartingWith(string &word){
        // Write your code here.
        Node* node=root;
        for(auto x:word){
            if(node->containsKey(x)){
                node=node->get(x);
            }
            else return 0;
        }
        return node->getp();
    }

    void erase(string &word){
        // Write your code here.
        Node* node=root;
        for(auto x:word){
            if(node->containsKey(x)){
                node=node->get(x);
                node->decp();
            }
            else return;
        }
        node->decend();
    }
};
